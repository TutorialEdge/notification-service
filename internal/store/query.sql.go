// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package store

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createList = `-- name: CreateList :one
INSERT INTO list (
    list_name
) VALUES (
    $1   
) RETURNING list_id, list_name
`

func (q *Queries) CreateList(ctx context.Context, listName string) (List, error) {
	row := q.db.QueryRowContext(ctx, createList, listName)
	var i List
	err := row.Scan(&i.ListID, &i.ListName)
	return i, err
}

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (
    notification_name,
    html
) VALUES (
    $1,
    $2
) RETURNING notification_id, notification_name, html
`

type CreateNotificationParams struct {
	NotificationName sql.NullString
	Html             sql.NullString
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification, arg.NotificationName, arg.Html)
	var i Notification
	err := row.Scan(&i.NotificationID, &i.NotificationName, &i.Html)
	return i, err
}

const createSubscriber = `-- name: CreateSubscriber :one
INSERT INTO subscribers (
    email
) VALUES (
    $1
) RETURNING subscriber_id, email, is_subscribed
`

func (q *Queries) CreateSubscriber(ctx context.Context, email string) (Subscriber, error) {
	row := q.db.QueryRowContext(ctx, createSubscriber, email)
	var i Subscriber
	err := row.Scan(&i.SubscriberID, &i.Email, &i.IsSubscribed)
	return i, err
}

const deleteList = `-- name: DeleteList :exec
DELETE FROM list 
WHERE list_id = $1
`

func (q *Queries) DeleteList(ctx context.Context, listID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteList, listID)
	return err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications
WHERE notification_id = $1
`

func (q *Queries) DeleteNotification(ctx context.Context, notificationID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteNotification, notificationID)
	return err
}

const getList = `-- name: GetList :one
SELECT list_id, list_name FROM list
WHERE list_id = $1 LIMIT 1
`

func (q *Queries) GetList(ctx context.Context, listID uuid.UUID) (List, error) {
	row := q.db.QueryRowContext(ctx, getList, listID)
	var i List
	err := row.Scan(&i.ListID, &i.ListName)
	return i, err
}

const getNotification = `-- name: GetNotification :one
SELECT notification_id, notification_name, html FROM notifications
WHERE notification_id = $1 LIMIT 1
`

func (q *Queries) GetNotification(ctx context.Context, notificationID uuid.UUID) (Notification, error) {
	row := q.db.QueryRowContext(ctx, getNotification, notificationID)
	var i Notification
	err := row.Scan(&i.NotificationID, &i.NotificationName, &i.Html)
	return i, err
}

const getSusbcriber = `-- name: GetSusbcriber :one
SELECT subscriber_id, email, is_subscribed FROM subscribers
WHERE subscriber_id = $1
`

func (q *Queries) GetSusbcriber(ctx context.Context, subscriberID uuid.UUID) (Subscriber, error) {
	row := q.db.QueryRowContext(ctx, getSusbcriber, subscriberID)
	var i Subscriber
	err := row.Scan(&i.SubscriberID, &i.Email, &i.IsSubscribed)
	return i, err
}

const unsubscribe = `-- name: Unsubscribe :exec
UPDATE subscribers
SET is_subscribed = 'f'
WHERE email = $1
`

func (q *Queries) Unsubscribe(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, unsubscribe, email)
	return err
}
